!(

# Optical simulation only for raytrace
if {$OptOnly && [regexp {\sRaytrace\s} $GopAttr]} {
    vputs -n -i-2 "
        * Vertex-based PMI at model scope
        pmi_OG1D \{
            node_output= \"n@node@_OG1D.plx\"
            grid_start= [lindex $MeshAttr 6]
            scaling= [lindex $MeshAttr 7]
        \}\n"
}

# From M-2016.12 onwards, it is necessary to set thermionic formula to 1
# if thermionic model is enabled with Fermi statistics
# Default formula 0 causes very high Jsc with OBAM
if {!$OptOnly} {
    for {set i 1} {$i <= $RegLen} {incr i} {
        for {set j [expr $i+1]} {$j <= $RegLen} {incr j} {
            set flg false
            foreach grp $IntfSRH {
                if {"r$i/$j" ne [lindex $grp 0]
                    && "r$j/$i" ne [lindex $grp 0]} continue
                if {[string is double -strict [lindex $grp 2]]} {
                    set flg true
                    if {[string is double -strict [lindex $grp 3]]} {
                        set str "[lindex $grp 2], [lindex $grp 3]"
                    } else {
                        set str "[lindex $grp 2], [lindex $grp 2]"
                    }
                } else {

                    # Element 2 is a trap file
                    if {[string is double -strict [lindex $grp 3]]} {
                        set flg true
                        if {[string is double -strict [lindex $grp 4]]} {
                            set str "[lindex $grp 3], [lindex $grp 4]"
                        } else {
                            set str "[lindex $grp 3], [lindex $grp 3]"
                        }
                    }
                }
                if {$flg} {
                    vputs -n -i-6 "
                        RegionInterface= \"[lindex $RegGen $i 0 1]/[lindex\
                            $RegGen $j 0 1]\" \{
                            SurfaceRecombination \{
                                S0= $str
                                Sref= 0.0
                            \}"
                    if {[string compare M-2016.12 [lindex $SimEnv 1]] < 1
                        && [lindex $RegGen $i 0 2] eq "Semiconductor"
                        && [lindex $RegGen $j 0 2] eq "Semiconductor"
                        && [lindex $RegGen $i 0 0] ne [lindex $RegGen $j 0 0]} {
                        vputs -n -i-6 "
                            ThermionicEmission \{
                                Formula= 1
                            \}"
                    }
                    vputs -n -i-6 "
                        \}\n"
                }
            }
            if {!$flg} {
                if {[string compare M-2016.12 [lindex $SimEnv 1]] == 1
                    || [lindex $RegGen $i 0 2] ne "Semiconductor"
                    || [lindex $RegGen $j 0 2] ne "Semiconductor"
                    || [lindex $RegGen $i 0 0] eq [lindex $RegGen $j 0 0]
                    || [catch {rr2pp $RegGen $i $j}]} continue
                vputs -n -i-5 "
                    RegionInterface= \"[lindex $RegGen $i 0 1]/[lindex\
                        $RegGen $j 0 1]\" \{
                        ThermionicEmission \{
                            Formula= 1
                        \}
                    \}\n"
            }
        }
    }
}

foreach grp $ModPar {
    if {[regexp {^r\d+$} [lindex $grp 0]]} {
        set idx [string range [lindex $grp 0] 1 end]
        vputs -n -i-4 "
                Region= \"[lindex $RegGen $idx 0 1]\" \{"
    } else {
        vputs -n -i-4 "
                Material= \"[lindex $grp 0]\" \{"
    }
    vputs -n -i-4 "
                    Insert= \"[lindex $grp 1]\""

    # Scan the rest values
    foreach lst [lrange $grp 2 end] {
        if {[lindex $lst 0] eq "EA0"} {
            if {![regexp {\{Eg0\s+[^\}]+\}} $grp]} {
                vputs -n -i-4 "
                    Bandgap \{
                        Chi0= [lindex $lst 1] * eV
                    \}"
            }
        } elseif {[lindex $lst 0] eq "Eg0"} {
            if {[regexp {\{EA0\s+([^\s\}]+)\}} $grp -> val]} {
                vputs -n -i-4 "
                    Bandgap \{
                        Chi0= $val * eV
                        Eg0= [lindex $lst 1] * eV
                    \}"
            } else {
                vputs -n -i-4 "
                    Bandgap \{
                        Eg0= [lindex $lst 1] * eV
                    \}"
            }
        } elseif {[lindex $lst 0] eq "NC300"} {
            vputs -n -i-4 "
                    eDOSMass \{
                        Formula= 2
                        Nc300= [lindex $lst 1] * cm^-3
                    \}"
        } elseif {[lindex $lst 0] eq "NV300"} {
            vputs -n -i-4 "
                    hDOSMass \{
                        Formula= 2
                        Nv300= [lindex $lst 1] * cm^-3
                    \}"
        } elseif {[lindex $lst 0] eq "DC"} {
            vputs -n -i-4 "
                    Epsilon \{
                        epsilon= [lindex $lst 1]
                    \}"
        } elseif {[lindex $lst 0] eq "mt"} {
            if {[string is double -strict [lindex $lst 2]]} {
                set str "[lindex $lst 1], [lindex $lst 2]"
            } else {
                set str "[lindex $lst 1], [lindex $lst 1]"
            }
            vputs -n -i-4 "
                    BarrierTunneling \{
                        mt= $str
                    \}"
        } elseif {[lindex $lst 0] eq "mu"} {
            if {[string is double -strict [lindex $lst 1]]} {
                if {[string is double -strict [lindex $lst 2]]} {
                    set str "[lindex $lst 1], [lindex $lst 2]"
                } else {
                    set str "[lindex $lst 1], [lindex $lst 1]"
                }
                vputs -n -i-4 "
                    ConstantMobility \{
                        mumax= $str * cm^2/(Vs)
                    \}"
            } elseif {[lindex $lst 1] eq "Masetti"} {
                vputs -n -i-4 "
                    DopingDependence \{
                        formula= 1, 1
                    \}"
            } elseif {[lindex $lst 1] eq "Arora"} {
                vputs -n -i-4 "
                    DopingDependence \{
                        formula= 2, 2
                    \}"
            }
        } elseif {[lindex $lst 0] eq "Aug"} {
            if {[string is double -strict [lindex $lst 1]]} {
                if {[string is double -strict [lindex $lst 2]]} {
                    set str "[lindex $lst 1], [lindex $lst 2]"
                } else {
                    set str "[lindex $lst 1], [lindex $lst 1]"
                }
                vputs -n -i-4 "
                    Auger \{
                        A= $str    * cm^6/s
                        B= 0.0000e+00, 0.0000e+00   * cm^6/s
                        C= 0.0000e+00, 0.0000e+00   * cm^6/s
                    \}"
            }
        } elseif {[lindex $lst 0] eq "Rad"} {
            if {[string is double -strict [lindex $lst 1]]} {
                vputs -n -i-4 "
                    RadiativeRecombination \{
                        C= [lindex $lst 1]  * cm^3/s
                        alpha= 0.0000e+00
                    \}"
            }
        } elseif {[lindex $lst 0] eq "SRH"} {
            if {[string is double -strict [lindex $lst 1]]} {
                if {[string is double -strict [lindex $lst 2]]} {
                    set str "[lindex $lst 1], [lindex $lst 2]"
                } else {
                    set str "[lindex $lst 1], [lindex $lst 1]"
                }
                vputs -n -i-4 "
                    Scharfetter \{
                        taumin= $str * s
                        taumax= $str * s
                    \}"
            } elseif {[string is double -strict [lindex $lst 2]]} {
                if {[string is double -strict [lindex $lst 3]]} {
                    set str "[lindex $lst 2], [lindex $lst 3]"
                } else {
                    set str "[lindex $lst 2], [lindex $lst 2]"
                }
                vputs -n -i-4 "
                    Scharfetter \{
                        taumin= $str * s
                        taumax= $str * s
                    \}"
            }
        }
    }
    if {![regexp {(\s|\{)Aug(\s|\})} $grp]
        && [lindex $RegGen $idx 0 0] eq "Silicon"} {
        vputs -n -i-4 "
                    intrinsicRichter \{
                        Blow= 0     * cm^-3/s
                    \}"
    }
    vputs -n -i-4 "
                \}\n"
}

if {[regexp {\sARC\s} $GopAttr]} {
    foreach grp $GopAttr {
        if {[lindex $grp 1] eq "ARC"} {
            foreach {var tmp str} [lrange $grp 2 end] {
                vputs -n -i-5 "
                    Material= \"$var\" \{
                        Insert= \"$str\"
                    \}\n"
            }
        }
    }
}

)!